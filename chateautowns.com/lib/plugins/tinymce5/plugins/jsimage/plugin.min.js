/**
 * Example Plugin for TinyMCE 5 (built with RC1)
 *
 * @author Marty Friedel
 */
(function () {
    var jsimage = (function () {
        'use strict';

        tinymce.PluginManager.add("jsimage", function (editor, url) {

            /*
            Add a custom icon to TinyMCE
             */
            editor.ui.registry.addIcon('bubbles', '<svg width="24" height="24"><use xlink:href="custom-icons.svg#bubbles4"></use></svg>');

            /*
            Use to store the instance of the Dialog
             */
            var _dialog = false;

            /*
            An array of options to appear in the "Type" select box.
             */
            var _ImageList = "";
			var _userData;
			var myDropzone;

            /**
             * Get the Dialog Configuration Object
             *
             * @returns {{buttons: *[], onSubmit: onSubmit, title: string, body: {}}}
             * @private
             */
            function _getDialogConfig()
            {
                return {
                    title: 'Advanced Image Manager',
                     body: {
                        type: 'panel',
                        items: [{
                            type: 'htmlpanel',
                            name: 'ImageList',
                            label: 'Images',
							html: _ImageList,
                            flex: true
                        }]
                    },
					size: 'large',
				 onChange: function (dialogApi, changeData) {
					_userData = dialogApi.getData();
					console.log(_userData);
				  },
                    onSubmit: function (api) {
                        // insert markup
					console.log("selection", editor.selection);
					console.log("node", editor.selection.getNode());
					console.log("content", editor.selection.getContent());

						var datamode = $("#jsimagesTabs").attr('data-mode');
						console.log(datamode);
						console.log("2");
						switch (datamode)
						{
						case "external":
							editor.selection.setContent("<img src=\""+$("#jsimagesFileAddress").val()+"\" />");
							break;
						case "upload":
							var txt = "";
							$("#tinyDropzone img.active").each(function(){
								txt += 	'<img src="'+$(this).parent().parent().attr("data-src")+'" />';						
							});
							editor.selection.setContent(txt);
							break;
						default:
								var txt = "";
								$(".jsimages.selected").each(function(){
									txt += 	'<img src="'+$(this).attr("data-src")+'" />';
								})
								editor.selection.setContent(txt);
//								editor.insertContent("<p>test</p>");
						}
//                        
//
//function(t){
//	return 
//		function(e)
//			{
//			var n=j(cn(t.image),e.getData());
//			s.undoManager.transact(
//				function(){
//					$e(s,ln(n))
//				}),
//				s.editorUpload.uploadImagesAuto(),e.close()}})
                        

                        // close the dialog
                        api.close();
                    },
                    buttons: [
                        {
                            text: 'Close',
                            type: 'cancel',
                            onclick: 'close'
                        },
                        {
                            text: 'Insert',
                            type: 'submit',
                            primary: true,
                            enabled: false
                        }
                    ]
                };
            }


			function initPlugin() {
					$("#jsimagesMenu a").click(function(){
						try {
							$("#jsimagesMenu a").removeClass('active');
							$("div.jsimagestab").removeClass('active');
							$(this).addClass("active");
							var activateTab = $(this).attr("href");
							$("div.jsimagestab[data-id=\""+activateTab+"\"]").addClass('active');
							$("#jsimagesTabs").attr('data-mode', $("div.jsimagestab[data-id=\""+activateTab+"\"]").attr("data-mode"));
						} catch(ex) {
							console.log(ex);
						}
						return false;
					})

					myDropzone = new Dropzone("#tinyDropzone", { maxFiles: 10, maxFilesize: "10M", clickable: true, acceptedFiles: "image/*", url: "/cms/file-manager/upload-tiny-image"});

					myDropzone.on("success", function(file, data) {
//						console.log(data);
						var dataJSON = $.parseJSON(data);
						$(file.previewElement).attr("data-src", dataJSON.location);
						$("#tinyDropzone .dz-success .dz-details > img").unbind("click");
						$("#tinyDropzone .dz-success .dz-details > img").click(function(){
							$(this).toggleClass("active");
							return false;
						});
						
						return false;
					});

				}

		

            /**
             * Plugin behaviour for when the Toolbar or Menu item is selected
             *
             * @private
             */
            function _onAction()
            {
				Dropzone.autoDiscover = false;
                // Open a Dialog, and update the dialog instance var
                _dialog = editor.windowManager.open(_getDialogConfig());

                // block the Dialog, and commence the data update
                // Message is used for accessibility
                _dialog.block('Loading...');
				
				$.get("/cms/file-manager/get-images-for-tiny", function(data){
					_ImageList = data;
		
					 // re-build the dialog
                    _dialog.redial(_getDialogConfig());

                    // unblock the dialog
                    _dialog.unblock();
					
					initPlugin();	

//					$("div.jsimagesFolder").accordion({header: "h3", collapsible: true, active: false});
				})
                // Do a server call to get the items for the select box
                // We'll pretend using a setTimeout call
             }

            // Define the Toolbar button
            editor.ui.registry.addButton('jsimage', {
                text: "",
                icon: 'image',
                onAction: _onAction
            });

            // Define the Menu Item
            editor.ui.registry.addMenuItem('jsimage', {
                text: 'Images',
                context: 'insert',
                icon: 'bubbles',
                onAction: _onAction
            });

            // Return details to be displayed in TinyMCE's "Help" plugin, if you use it
            // This is optional.
            return {
                getMetadata: function () {
                    return {
                        name: "Advanced Image Manager",
                        url: ""
                    };
                }
            };
        });
    }());
})();